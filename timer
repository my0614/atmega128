#define F_CPU 16000000UL
#include <avr/io.h>
#include <stdio.h>

// _delay_ms() 함수 등이 정의되어 있음
#include <util/delay.h>

#define sbi(x, y) (x |= (1 << y))  // x의 y 비트를 설정(1)
#define cbi(x, y) (x &= ~(1 << y)) // x의 y 비트를 클리어(0)

// CON 포트는 포트 C와 연결됨을 정의
#define LCD_CON      PORTF
// DATA 포트는 포트 A와 연결됨을 정의
#define LCD_DATA     PORTD
// DATA 포트의 출력 방향 설정 매크로를 정의
#define LCD_DATA_DIR DDRD
// DATA 포트의 입력 방향 설정 매크로를 정의
#define LCD_DATA_IN  PIND
// RS 신호의 비트 번호 정의
#define LCD_RS   0
// RW 신호의 비트 번호 정의
#define LCD_RW   1
// E 신호의 비트 번호 정의
#define LCD_E    2

// 텍스트 LCD로 부터 상태(명령)를 읽는 함수
unsigned char LCD_rCommand(void){
	unsigned char temp=1;
	
	LCD_DATA_DIR = 0X00;
	
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
	sbi(LCD_CON, LCD_RW); // 1번 비트 설정, RW = 1, 읽기
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1
	_delay_us(1);
	
	temp = LCD_DATA_IN;      // 명령 읽기
	_delay_us(1);
	
	cbi(LCD_CON, LCD_E);  // 명령 읽기 동작 끝
	
	LCD_DATA_DIR = 0XFF;
	_delay_us(1);
	
	return temp;
}

// 텍스트 LCD의 비지 플래그 상태를 확인하는 함수
char LCD_BusyCheck(unsigned char temp){
	if(temp & 0x80)          return 1;
	else            return 0;
}

// 텍스트 LCD에 명령을 출력하는 함수 - 단, 비지플래그 체크하지 않음
void LCD_wCommand(char cmd){
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1
	
	LCD_DATA = cmd;          // 명령 출력
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 명령 쓰기 동작 끝
	
	_delay_us(1);
}

// 텍스트 LCD에 명령을 출력하는 함수 - 단, 비지플래그 체크함
void LCD_wBCommand(char cmd){
	while(LCD_BusyCheck(LCD_rCommand()))
	_delay_us(1);
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1
	
	LCD_DATA = cmd;          // 명령 출력
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 명령 쓰기 동작 끝
	
	_delay_us(1);
}

// 텍스트 LCD를 초기화하는 함수
void LCD_Init(void){
	_delay_ms(100);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
	_delay_ms(10);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
	_delay_us(200);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
	_delay_us(200);
	
	// 비지 플래그를 체크하는 Function Set
	LCD_wBCommand(0x38);
	// 비지 플래그를 체크하는 Display On/Off Control
	LCD_wBCommand(0x0c);
	// 비지 플래그를 체크하는 Clear Display
	LCD_wBCommand(0x01);
}

// 텍스트 LCD에 1바이트 데이터를 출력하는 함수
void LCD_wData(char dat){
	while(LCD_BusyCheck(LCD_rCommand()))
	_delay_us(1);
	
	sbi(LCD_CON, LCD_RS); // 0번 비트 설정, RS = 1, 데이터
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
	sbi(LCD_CON, LCD_E); // 2번 비트 설정, E = 1
	
	LCD_DATA = dat;       // 데이터 출력
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 데이터 쓰기 동작 끝
	
	_delay_us(1);
}

// 텍스트 LCD에 문자열을 출력하는 함수
void LCD_wString(char *str){
	while(*str)
	LCD_wData(*str++);
}

// C 언어의 주 실행 함수
int main(void){
	unsigned int toggle = 5;
	char buffhour[4];
	char buffmin[4];
	char buffsecond[4];
	int a=0,b=0,c=0;
	// 포트 D의 방향 설정, 0 : 입력, 1 : 출력
	DDRD = 0B11111111;
	
	// 포트 F의 방향 설정, 0 : 입력, 1 : 출력
	DDRF = 0B11111111;
	
	LCD_Init();         // 텍스트 LCD 초기화 - 함수 호출
	while(1)
	{
		if((PINE & 01)  == 0)
		{
			toggle = !toggle;
			_delay_ms(10);
		}
		
		if((PINE & 02)  == 0)
		{
			toggle = 2;
		}
		
		LCD_wBCommand(0x80 | 0x00);  // DDRAM Address = 0x40 설정
		LCD_wString("     TIME");
		
		LCD_wBCommand(0x80 | 0x40);
		sprintf(buffhour, "%02d ", c);
		LCD_wString(buffhour); // WESNET 문자열 출력
		LCD_wString(" : ");
		sprintf(buffmin, "%02d ", b);
		LCD_wString(buffmin); // WESNET 문자열 출력
		LCD_wString(" : ");
		sprintf(buffsecond, "%02d ", a);
		LCD_wString(buffsecond); // WESNET 문자열 출력
		LCD_wString(" : ");
		_delay_ms(100);
		
		if(a >99)
		{
			a = 0;
			b++;
			
			
		}
		if(b >99)
		{
			b = 0;
			c++;
		}
		
		if(toggle == 2)
		{
			a = 0,b = 0,c =0;
			LCD_wBCommand(0x80 | 0x00);  // DDRAM Address = 0x40 설정
			LCD_wString("     TIME");
			
			LCD_wBCommand(0x80 | 0x40);
			sprintf(buffhour, "%02d ", c);
			LCD_wString(buffhour); // WESNET 문자열 출력
			LCD_wString(" : ");
			sprintf(buffmin, "%02d ", b);
			LCD_wString(buffmin); // WESNET 문자열 출력
			LCD_wString(" : ");
			sprintf(buffsecond, "%02d ", a);
			LCD_wString(buffsecond); // WESNET 문자열 출력
			LCD_wString(" : ");
			_delay_ms(100);
			
		}
		if(toggle == 1)
		{
				a++;
		
		}
		if(toggle == 0)
		{				
				a;
				b;
				c;
		
			
		}
	}
	
	return 0;
}
