#define F_CPU 16000000UL
#include <avr/io.h>
#include <stdio.h>
#include <avr/interrupt.h>

// _delay_ms() 함수 등이 정의되어 있음
#include <util/delay.h>

#define sbi(x, y) (x |= (1 << y))  // x의 y 비트를 설정(1)
#define cbi(x, y) (x &= ~(1 << y)) // x의 y 비트를 클리어(0)

// CON 포트는 포트 C와 연결됨을 정의
#define LCD_CON      PORTF
// DATA 포트는 포트 A와 연결됨을 정의
#define LCD_DATA     PORTD
// DATA 포트의 출력 방향 설정 매크로를 정의
#define LCD_DATA_DIR DDRD
// DATA 포트의 입력 방향 설정 매크로를 정의
#define LCD_DATA_IN  PIND
// RS 신호의 비트 번호 정의
#define LCD_RS   0
// RW 신호의 비트 번호 정의
#define LCD_RW   1
// E 신호의 비트 번호 정의
#define LCD_E    2

int mode = 0;

// 텍스트 LCD로 부터 상태(명령)를 읽는 함수
unsigned char LCD_rCommand(void){
	unsigned char temp=1;
	
	LCD_DATA_DIR = 0X00;
	
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
	sbi(LCD_CON, LCD_RW); // 1번 비트 설정, RW = 1, 읽기
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1
	_delay_us(1);
	
	temp = LCD_DATA_IN;      // 명령 읽기
	_delay_us(1);
	
	cbi(LCD_CON, LCD_E);  // 명령 읽기 동작 끝
	
	LCD_DATA_DIR = 0XFF;
	_delay_us(1);
	
	return temp;
}



// 텍스트 LCD의 비지 플래그 상태를 확인하는 함수
char LCD_BusyCheck(unsigned char temp){
	if(temp & 0x80)          return 1;
	else            return 0;
}

// 텍스트 LCD에 명령을 출력하는 함수 - 단, 비지플래그 체크하지 않음
void LCD_wCommand(char cmd){
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1
	
	LCD_DATA = cmd;          // 명령 출력
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 명령 쓰기 동작 끝
	
	_delay_us(1);
}

// 텍스트 LCD에 명령을 출력하는 함수 - 단, 비지플래그 체크함
void LCD_wBCommand(char cmd){
	while(LCD_BusyCheck(LCD_rCommand()))
	_delay_us(1);
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1
	
	LCD_DATA = cmd;          // 명령 출력
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 명령 쓰기 동작 끝
	
	_delay_us(1);
}

// 텍스트 LCD를 초기화하는 함수
void LCD_Init(void){
	_delay_ms(100);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
	_delay_ms(10);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
	_delay_us(200);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
	_delay_us(200);
	
	// 비지 플래그를 체크하는 Function Set
	LCD_wBCommand(0x38);
	// 비지 플래그를 체크하는 Display On/Off Control
	LCD_wBCommand(0x0c);
	// 비지 플래그를 체크하는 Clear Display
	LCD_wBCommand(0x01);
}

// 텍스트 LCD에 1바이트 데이터를 출력하는 함수
void LCD_wData(char dat){
	while(LCD_BusyCheck(LCD_rCommand()))
	_delay_us(1);
	
	sbi(LCD_CON, LCD_RS); // 0번 비트 설정, RS = 1, 데이터
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
	sbi(LCD_CON, LCD_E); // 2번 비트 설정, E = 1
	
	LCD_DATA = dat;       // 데이터 출력
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 데이터 쓰기 동작 끝
	
	_delay_us(1);
}

// 텍스트 LCD에 문자열을 출력하는 함수
void LCD_wString(char *str){
	while(*str)
	LCD_wData(*str++);
}


void LCD_setcursor(char col, char row)
{
	LCD_wBCommand(0x80 | col * 0x40 + row);
}

volatile unsigned int hour = 0, min = 0, second = 0,count=0,i=0;

ISR(TIMER0_OVF_vect) // overflow interrupt 발생시
{	
	TCNT0 = 4;
	count++;
	if(count>1000)
	{
		++second;
		if(second >= 59)
		{
			second = 0;
			min++;
		}
		if(min >= 59)
		{
			second = 0;
			min = 0;
			hour++;
			
		}
		hour %= 24;		
		count=0;
		if(mode == 0)
		{	
			int buff[100];
			LCD_setcursor(0,6); // 출력시작위치
			LCD_wString("TIME");
			LCD_setcursor(1,3); // 출력시작위치
			sprintf(buff, "%02d:%02d:%02d",hour, min, second);
			LCD_wString(buff); // WESNET 문자열 출력
		}
	}
	
}



// C 언어의 주 실행 함수
int main(void){
	DDRA = 0xff;
	PORTA = 0xff;
	TCCR0 = 0x04;
	TCNT0 = 6; // TCNT 초기값정하기
	TIMSK = 0x01; // 인터럽트 사용하기 사용허가
	sei();
	
	char buff1[20];
	int cur=10;

	int a=0,b=0,c=0;
	// 포트 D의 방향 설정, 0 : 입력, 1 : 출력
	DDRD = 0B11111111;
	// 포트 F의 방향 설정, 0 : 입력, 1 : 출력
	DDRF = 0B11111111;
	
	LCD_Init();         // 텍스트 LCD 초기화 - 함수 호출
	LCD_wBCommand(0x0E);
	_delay_ms(100);
	while(1)
	{			
		if((PINE & 0x01) == 0) // 눌렀을 때
		{
			mode++;
			if(mode == 5)
			{
				LCD_Init();
				mode = 0; hour = a; min = b; second = c;
			}
			while((PINE & 0x01) == 0);
		}
		
		if(mode)
		{
			if(mode == 1)
			{
				char buff[100];
				a = hour; b = min; c = second;
				LCD_Init();
				LCD_setcursor(0,6); // 출력시작위치
				LCD_wString("EDIT");
				LCD_setcursor(1,3); // 출력시작위치
				sprintf(buff, "%02d:%02d:%02d",a, b, c);
				LCD_wString(buff); // WESNET 문자열 출력
				mode = 2;
			}
			if((PINE &  0x02) == 0)
			{
				char buff[100];
				switch(mode)
				{
					case 2:
						c++;	break;
					case 3:
						b++;	break;
					case 4:
						a++;	break;
				}
				if(c >= 60)
				{
					c = 0;
					b++;
				}
				if(b >= 60)
				{
					b = 0;
					a++; 
				}
				a %= 24;
				LCD_setcursor(1,3); // 출력시작위치
				sprintf(buff, "%02d:%02d:%02d",a, b, c);
				
				
				
				LCD_wString(buff);
				while((PINE &  0x02) == 0);
			}	
		}
		
		
	}
	
	return 0;
}
