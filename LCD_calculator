


#ifndef LCD_H_
#define LCD_H_


#define sbi(x, y) (x |= (1 << y))  // x의 y 비트를 설정(1)
#define cbi(x, y) (x &= ~(1 << y)) // x의 y 비트를 클리어(0)
// CON 포트는 포트 C와 연결됨을 정의
#define LCD_CON      PORTF
// DATA 포트는 포트 A와 연결됨을 정의
#define LCD_DATA     PORTD
// DATA 포트의 출력 방향 설정 매크로를 정의
#define LCD_DATA_DIR DDRD
// DATA 포트의 입력 방향 설정 매크로를 정의
#define LCD_DATA_IN  PIND
// RS 신호의 비트 번호 정의
#define LCD_RS   0
// RW 신호의 비트 번호 정의
#define LCD_RW   1
// E 신호의 비트 번호 정의
#define LCD_E    2

// 텍스트 LCD로 부터 상태(명령)를 읽는 함수
unsigned char LCD_rCommand(void){
	unsigned char temp=1;

	LCD_DATA_DIR = 0X00;

	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
	sbi(LCD_CON, LCD_RW); // 1번 비트 설정, RW = 1, 읽기
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1
	_delay_us(1);

	temp = LCD_DATA_IN;      // 명령 읽기
	_delay_us(1);

	cbi(LCD_CON, LCD_E);  // 명령 읽기 동작 끝

	LCD_DATA_DIR = 0XFF;
	_delay_us(1);

	return temp;
}



// 텍스트 LCD의 비지 플래그 상태를 확인하는 함수
char LCD_BusyCheck(unsigned char temp){
	if(temp & 0x80)          return 1;
	else            return 0;
}

// 텍스트 LCD에 명령을 출력하는 함수 - 단, 비지플래그 체크하지 않음
void LCD_wCommand(char cmd){
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1

	LCD_DATA = cmd;          // 명령 출력
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 명령 쓰기 동작 끝

	_delay_us(1);
}

// 텍스트 LCD에 명령을 출력하는 함수 - 단, 비지플래그 체크함
void LCD_wBCommand(char cmd){
	while(LCD_BusyCheck(LCD_rCommand()))
	_delay_us(1);
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1

	LCD_DATA = cmd;          // 명령 출력
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 명령 쓰기 동작 끝

	_delay_us(1);
}

// 텍스트 LCD를 초기화하는 함수
void LCD_Init(void){
	_delay_ms(100);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
	_delay_ms(10);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
	_delay_us(200);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
	_delay_us(200);

	// 비지 플래그를 체크하는 Function Set
	LCD_wBCommand(0x38);
	// 비지 플래그를 체크하는 Display On/Off Control
	LCD_wBCommand(0x0c);
	// 비지 플래그를 체크하는 Clear Display
	LCD_wBCommand(0x01);
}

// 텍스트 LCD에 1바이트 데이터를 출력하는 함수
void LCD_wData(char dat){
	while(LCD_BusyCheck(LCD_rCommand()))
	_delay_us(1);

	sbi(LCD_CON, LCD_RS); // 0번 비트 설정, RS = 1, 데이터
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
	sbi(LCD_CON, LCD_E); // 2번 비트 설정, E = 1

	LCD_DATA = dat;       // 데이터 출력
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 데이터 쓰기 동작 끝

	_delay_us(1);
}

// 텍스트 LCD에 문자열을 출력하는 함수
void LCD_wString(char *str){
	while(*str)
	LCD_wData(*str++);
}


void LCD_setcursor(char col, char row)
{
	LCD_wBCommand(0x80 | col * 0x40 + row);
}




#endif /* LCD_H_ */



===================================================================================

#define F_CPU 16000000UL
#include <avr/io.h>
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>
#include "lcd.h"



int seg[10] = {
	0b11000000,
	0b11111001,
	0b10100100,
	0b10110000,
	0b10011001,
	0b10010010,
	0b10000010,
	0b11111000,
	0b10000000,
	0b10010000
	
};



int num[8] = {
	0b11111110,
	0b11111100,
	0b11111000,
	0b11110000,
	0b11100000,
	0b11000000,
	0b10000000
	
};



// C 언어의 주 실행 함수
int main(void){

	DDRC = 0xff; // 세그먼트
	PORTC = 0xff; // 출력모드
	DDRA = 0xff; // LED
	
	unsigned int toggle = 5;
	char buff1[4];
	char buff2[4];
	int i,j,a=0,b=0,value=0;
	
	DDRD = 0B11111111;
	DDRF = 0B11111111;


	LCD_Init();         // 텍스트 LCD 초기화 - 함수 호출
	LCD_wBCommand(0x0E);
	_delay_ms(100);
	
	while(1)
	{
		
		LCD_setcursor(0,0); // 출력시작위치
		sprintf(buff1, "%d + %d ", a,b);
		LCD_wString(buff1);
			PORTC = seg[i++];
			if(i>=10)
				i = 0;
			PORTA = num[j++];
			if(j>=8)
				j=0;
			_delay_ms(1000);
		

		if((PINE & 0x01) == 0) // 눌렀을 때
		{
			toggle = 1;
		}

		if((PINE & 0x02) == 0) // 눌렀을 때
		{
			toggle = 2;
		}
		
		if(toggle == 1)
		{
			LCD_setcursor(0,0); // 출력시작위치
			a = i;
			LCD_wString(buff1);
			toggle= 6;
			
			
		}
		if(toggle == 2)
		{
			LCD_setcursor(0,0); // 출력시작위치
			b = j;
			LCD_wString(buff1);
			toggle = 3;
			value =a+b;
			sprintf(buff2, "= %d", value);
			LCD_wString(buff2);
			
		}
		
		

	}

	return 0;
}
